<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OOP on LMJW Blog</title><link>https://lmjw.github.io/tags/oop/</link><description>Recent content in OOP on LMJW Blog</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://lmjw.github.io/tags/oop/index.xml" rel="self" type="application/rss+xml"/><item><title>OOP design notes</title><link>https://lmjw.github.io/post/oopdesignnotes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lmjw.github.io/post/oopdesignnotes/</guid><description>Decomposition &amp;amp; Generalization Association Loosely coupled relationship between two objects. Below are the code representation.
UML represents this with solid line.
public class Student{ public void play(Sport sport){ ... } } public class Wine{ public void pair( food){ ... } } Aggregation More like has a relationship where a whole has parts that belong to it. The code example is below.
Uml represents with empty diamond. Diamond is on the class that has other class.
public class Airliner{ private ArrayList&amp;lt;CrewMember&amp;gt; crew; public Airliner(){ crew = new ArrayList&amp;lt;CrewMember&amp;gt;(); } public void add(CrewMember crewMember) { ... } } public class PetStore{ private ArrayList&amp;lt;Pet&amp;gt; pets; public PetStore(){ pets = new ArrayList&amp;lt;Pet&amp;gt;(); } public void add(Pet pet){ .</description></item></channel></rss>