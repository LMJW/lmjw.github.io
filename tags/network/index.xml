<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>network on LMJW Blog</title><link>https://lmjw.github.io/tags/network/</link><description>Recent content in network on LMJW Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 26 Dec 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://lmjw.github.io/tags/network/index.xml" rel="self" type="application/rss+xml"/><item><title>A simple example of using docker container to realize the grpc client and server communication</title><link>https://lmjw.github.io/post/2017-12-26-docker-grpc-network/</link><pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate><guid>https://lmjw.github.io/post/2017-12-26-docker-grpc-network/</guid><description>First, build a docker container that contains all required packages. In this example, I choose ubuntu:bionic as the basic image, and I installed other packages onto it.
FROM ubuntu:bionic RUN apt-get update RUN apt-get install python3 -y RUN apt-get install python3-pip -y RUN pip3 install grpcio ADD app /app/ EXPOSE 22222 The Dockerfile is shown above. In the app file, it contains 4 files. They are:
client.py, server.py, test_pb2.py, test_pb2_grpc.py
test_pb2.py and test_pb2_grpc.py is generated by compiling the test.protofile. The content for test.proto is shown below.
syntax = &amp;quot;proto3&amp;quot;; package lmjwtest; // service, encode a plain text service EncodeService { // request a service of encode rpc GetEncode(plaintext) returns (encodetext) {} } message plaintext { string pttransactionID = 1; string ptproperties = 2; string ptsenderID = 3; } message encodetext { string enctransactionID = 1; string encproperties = 2; string encsenderID = 3; } By using the grpcio-tools to compile the test.</description></item></channel></rss>