<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CS on LMJW Blog</title><link>https://lmjw.github.io/tags/cs/</link><description>Recent content in CS on LMJW Blog</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://lmjw.github.io/tags/cs/index.xml" rel="self" type="application/rss+xml"/><item><title>common knowledge cheat sheet</title><link>https://lmjw.github.io/post/smalllearning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lmjw.github.io/post/smalllearning/</guid><description>Rust String.push(char) takes char Vec has reverse method where as iterator has rev method String and &amp;amp;str both have chars method that convert string to Char String and &amp;amp;str can be split_whitespace they also can call split(pat: P) e.g split(' ') is equivalent to split by whitespace NOTE: in rust usize -1 could overflow to max, this might causing algorithm not working properly If we are dealing with linked list with Option&amp;lt;Box&amp;lt;Node&amp;gt;&amp;gt;, we can potentially using Box::clone() to overcome some limitation due to borrow checker. Box::clone should be relatively not expensive as mentioned in rust book: a box is a smart pointer to a heap allocated value of T.</description></item><item><title>OOP design notes</title><link>https://lmjw.github.io/post/oopdesignnotes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lmjw.github.io/post/oopdesignnotes/</guid><description>Decomposition &amp;amp; Generalization Association Loosely coupled relationship between two objects. Below are the code representation.
UML represents this with solid line.
public class Student{ public void play(Sport sport){ ... } } public class Wine{ public void pair( food){ ... } } Aggregation More like has a relationship where a whole has parts that belong to it. The code example is below.
Uml represents with empty diamond. Diamond is on the class that has other class.
public class Airliner{ private ArrayList&amp;lt;CrewMember&amp;gt; crew; public Airliner(){ crew = new ArrayList&amp;lt;CrewMember&amp;gt;(); } public void add(CrewMember crewMember) { ... } } public class PetStore{ private ArrayList&amp;lt;Pet&amp;gt; pets; public PetStore(){ pets = new ArrayList&amp;lt;Pet&amp;gt;(); } public void add(Pet pet){ .</description></item></channel></rss>